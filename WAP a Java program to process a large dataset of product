import java.util.*;
import java.util.stream.Collectors;

class Product {
    private String name;
    private String category;
    private double price;

    public Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    public String getName() { return name; }
    public String getCategory() { return category; }
    public double getPrice() { return price; }

    @Override
    public String toString() {
        return name + " ($" + price + ")";
    }
}

public class ProductProcessor {
    public static void main(String[] args) {
        // Sample product dataset
        List<Product> products = Arrays.asList(
            new Product("Laptop", "Electronics", 1200),
            new Product("Smartphone", "Electronics", 800),
            new Product("TV", "Electronics", 1500),
            new Product("Jeans", "Clothing", 50),
            new Product("T-Shirt", "Clothing", 20),
            new Product("Jacket", "Clothing", 100),
            new Product("Fridge", "Appliances", 900),
            new Product("Washing Machine", "Appliances", 700),
            new Product("Microwave", "Appliances", 300)
        );

        // 1. Group products by category
        Map<String, List<Product>> groupedByCategory = products.stream()
                .collect(Collectors.groupingBy(Product::getCategory));

        System.out.println("Products Grouped by Category:");
        groupedByCategory.forEach((category, productList) -> 
            System.out.println(category + " -> " + productList)
        );

        // 2. Find the most expensive product in each category
        Map<String, Optional<Product>> mostExpensiveByCategory = products.stream()
                .collect(Collectors.groupingBy(
                        Product::getCategory, 
                        Collectors.maxBy(Comparator.comparingDouble(Product::getPrice))
                ));

        System.out.println("\nMost Expensive Product in Each Category:");
        mostExpensiveByCategory.forEach((category, product) -> 
            System.out.println(category + " -> " + product.orElse(null))
        );

        // 3. Calculate the average price of all products
        double averagePrice = products.stream()
                .mapToDouble(Product::getPrice)
                .average()
                .orElse(0);

        System.out.printf("\nAverage Price of All Products: $%.2f%n", averagePrice);
    }
}
